// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebsiteOrdering.Models;

#nullable disable

namespace WebsiteOrdering.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("NGAYSINH");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HOTEN");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GIOITINH");

                    b.Property<string>("Idchinhanh")
                        .HasColumnType("char(5)")
                        .HasColumnName("CHINHANH");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Idchinhanh");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Ban", b =>
                {
                    b.Property<string>("Idban")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDBAN")
                        .IsFixedLength();

                    b.Property<string>("Idchinhanh")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDCHINHANH")
                        .IsFixedLength();

                    b.Property<string>("Khuvuc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KHUVUC");

                    b.Property<int>("Songuoi")
                        .HasColumnType("int")
                        .HasColumnName("SONGUOI");

                    b.Property<string>("Tenban")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TENBAN");

                    b.Property<string>("Trangthaiban")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TRANGTHAIBAN");

                    b.Property<string>("X")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("X");

                    b.Property<string>("Y")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Y");

                    b.HasKey("Idban")
                        .HasName("PK__BAN__9367225E468C45A0");

                    b.HasIndex("Idchinhanh");

                    b.ToTable("BAN", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Banlock", b =>
                {
                    b.Property<string>("IdBanLock")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDBANLOCK")
                        .IsFixedLength();

                    b.Property<TimeOnly>("BatDau")
                        .HasColumnType("time")
                        .HasColumnName("BATDAU");

                    b.Property<string>("IdBan")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDBAN");

                    b.Property<TimeOnly>("KetThuc")
                        .HasColumnType("time")
                        .HasColumnName("KETTHUC");

                    b.Property<DateOnly>("Ngay")
                        .HasColumnType("date")
                        .HasColumnName("NGAY");

                    b.HasKey("IdBanLock")
                        .HasName("PK__IDBANLOCK__5F20FC40654C6C03");

                    b.HasIndex("IdBan");

                    b.ToTable("BANLOCK", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chinhanh", b =>
                {
                    b.Property<string>("Idchinhanh")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDCHINHANH")
                        .IsFixedLength();

                    b.Property<string>("Diachicn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DIACHICN");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LATITUDE");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("LONGITUDE");

                    b.Property<string>("Tencnhanh")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TENCNHANH");

                    b.HasKey("Idchinhanh")
                        .HasName("PK__CHINHANH__5F20FC40654C6C03");

                    b.ToTable("CHINHANH", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chitietdatban", b =>
                {
                    b.Property<string>("Iddatban")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDDATBAN")
                        .IsFixedLength();

                    b.Property<string>("Idban")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDBAN")
                        .IsFixedLength();

                    b.Property<TimeOnly>("Giora")
                        .HasColumnType("time")
                        .HasColumnName("GIORA");

                    b.Property<TimeOnly>("Giovao")
                        .HasColumnType("time")
                        .HasColumnName("GIOVAO");

                    b.HasKey("Iddatban", "Idban")
                        .HasName("PK__CHITIETD__27F2122C38F80AE0");

                    b.HasIndex("Idban");

                    b.ToTable("CHITIETDATBAN", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chitietdonhang", b =>
                {
                    b.Property<string>("IdChitiet")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDCHITIET")
                        .IsFixedLength();

                    b.Property<int>("Dongia")
                        .HasColumnType("int")
                        .HasColumnName("DONGIA");

                    b.Property<string>("Ghichu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("GHICHU");

                    b.Property<string>("Iddebanh")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDDEBANH")
                        .IsFixedLength();

                    b.Property<string>("Iddonhang")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDDONHANG")
                        .IsFixedLength();

                    b.Property<string>("Idmonan")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDMONAN")
                        .IsFixedLength();

                    b.Property<string>("Idmonan2")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDMONAN2")
                        .IsFixedLength();

                    b.Property<string>("Idsize")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDSIZE")
                        .IsFixedLength();

                    b.Property<string>("Kieupizza")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KIEUPIZZA");

                    b.Property<int>("Soluong")
                        .HasColumnType("int")
                        .HasColumnName("SOLUONG");

                    b.Property<int>("Tongtiendh")
                        .HasColumnType("int")
                        .HasColumnName("TONGTIENDH");

                    b.HasKey("IdChitiet")
                        .HasName("PK__CHITIETD__150E02391C3C3DE5");

                    b.HasIndex("Iddebanh");

                    b.HasIndex("Iddonhang");

                    b.HasIndex("Idmonan");

                    b.HasIndex("Idmonan2");

                    b.HasIndex("Idsize");

                    b.ToTable("CHITIETDONHANG", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chitiettopping", b =>
                {
                    b.Property<string>("IdChitiet")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDCHITIET")
                        .IsFixedLength();

                    b.Property<string>("Idtopping")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDTOPPING")
                        .IsFixedLength();

                    b.HasKey("IdChitiet", "Idtopping")
                        .HasName("PK_CHITIETTOPPING");

                    b.HasIndex("Idtopping");

                    b.ToTable("CHITIETTOPPING", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Datban", b =>
                {
                    b.Property<string>("Iddatban")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDDATBAN")
                        .IsFixedLength();

                    b.Property<string>("Ghichu")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("GHICHU");

                    b.Property<TimeOnly>("Giobatdau")
                        .HasColumnType("time")
                        .HasColumnName("GIOBATDAU");

                    b.Property<TimeOnly>("Gioketthuc")
                        .HasColumnType("time")
                        .HasColumnName("GIOKETTHUC");

                    b.Property<string>("Idchinhanh")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDCHINHANH")
                        .IsFixedLength();

                    b.Property<string>("Idngdung")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("IDNGDUNG");

                    b.Property<string>("Lydo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LYDO");

                    b.Property<DateOnly>("Ngaydat")
                        .HasColumnType("date")
                        .HasColumnName("NGAYDAT");

                    b.Property<int>("Songuoidat")
                        .HasColumnType("int")
                        .HasColumnName("SONGUOIDAT");

                    b.Property<string>("Sđtngdat")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SĐTNGDAT");

                    b.Property<string>("Tenngdat")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TENNGDAT");

                    b.Property<string>("Trangthaidatban")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TRANGTHAIDATBAN");

                    b.HasKey("Iddatban")
                        .HasName("PK__DATBAN__DEC460099CB35DD0");

                    b.HasIndex("Idchinhanh");

                    b.HasIndex("Idngdung");

                    b.ToTable("DATBAN", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Debanh", b =>
                {
                    b.Property<string>("Iddebanh")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDDEBANH")
                        .IsFixedLength();

                    b.Property<int>("Giadebanh")
                        .HasColumnType("int")
                        .HasColumnName("GIADEBANH");

                    b.Property<string>("Tendebanh")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TENDEBANH");

                    b.HasKey("Iddebanh")
                        .HasName("PK__DEBANH__555F23FF6173600D");

                    b.ToTable("DEBANH", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Donhang", b =>
                {
                    b.Property<string>("Iddonhang")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDDONHANG")
                        .IsFixedLength();

                    b.Property<string>("DeliveryMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diachidh")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("DIACHIDH");

                    b.Property<string>("Idchinhanh")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDCHINHANH")
                        .IsFixedLength();

                    b.Property<string>("Iddatban")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDDATBAN")
                        .IsFixedLength();

                    b.Property<string>("Idngdung")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("IDNGDUNG");

                    b.Property<double?>("Khoangcachship")
                        .HasColumnType("float");

                    b.Property<string>("Magiaodich")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Ngaydat")
                        .HasColumnType("datetime2")
                        .HasColumnName("NGAYDAT");

                    b.Property<string>("Ptttoan")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PTTTOAN");

                    b.Property<string>("Sdtkh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Songuoi")
                        .HasColumnType("int")
                        .HasColumnName("SONGUOI");

                    b.Property<string>("Tenkh")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TENKH");

                    b.Property<decimal?>("Tienship")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TIENSHIP");

                    b.Property<decimal>("Tongtien")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TONGTIEN");

                    b.Property<string>("Trangthai")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TRANGTHAI");

                    b.HasKey("Iddonhang")
                        .HasName("PK__DONHANG__F59FA8B171F225E2");

                    b.HasIndex("Idchinhanh");

                    b.HasIndex("Iddatban");

                    b.HasIndex("Idngdung");

                    b.ToTable("DONHANG", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Listgiasize", b =>
                {
                    b.Property<string>("Idloaimonan")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDLOAIMONAN")
                        .IsFixedLength();

                    b.Property<string>("Idsize")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDSIZE")
                        .IsFixedLength();

                    b.Property<int>("Giasize")
                        .HasColumnType("int")
                        .HasColumnName("GIASIZE");

                    b.Property<string>("MonanIdmonan")
                        .HasColumnType("char(5)");

                    b.HasKey("Idloaimonan", "Idsize")
                        .HasName("PK__LISTGIAS__93A480290675CE8A");

                    b.HasIndex("Idsize");

                    b.HasIndex("MonanIdmonan");

                    b.ToTable("LISTGIASIZE", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Loaimonan", b =>
                {
                    b.Property<string>("Idloaimonan")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDLOAIMONAN")
                        .IsFixedLength();

                    b.Property<string>("IdloaimanCha")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDLOAIMAN_CHA")
                        .IsFixedLength();

                    b.Property<string>("Tenloaimonan")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TENLOAIMONAN");

                    b.HasKey("Idloaimonan")
                        .HasName("PK__LOAIMONA__6B7E94ED6B8131AD");

                    b.ToTable("LOAIMONAN", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.MonAnGhepStats", b =>
                {
                    b.Property<string>("Idmonan")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDMONAN")
                        .IsFixedLength();

                    b.Property<int>("SoLanDuocGhep")
                        .HasColumnType("int")
                        .HasColumnName("SOLANDUOCGHEP");

                    b.HasKey("Idmonan");

                    b.ToTable("MONANGHEPSTATS", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Monan", b =>
                {
                    b.Property<string>("Idmonan")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDMONAN")
                        .IsFixedLength();

                    b.Property<string>("Anhmonan")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ANHMONAN");

                    b.Property<int>("Giamonan")
                        .HasColumnType("int")
                        .HasColumnName("GIAMONAN");

                    b.Property<string>("Idloaimonan")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDLOAIMONAN")
                        .IsFixedLength();

                    b.Property<string>("Mota")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("MOTA");

                    b.Property<int>("SoLuongBan")
                        .HasColumnType("int");

                    b.Property<string>("Tenmonan")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TENMONAN");

                    b.Property<string>("Trangthaiman")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TRANGTHAIMAN");

                    b.HasKey("Idmonan")
                        .HasName("PK__MONAN__091AA88F8490BF0E");

                    b.HasIndex("Idloaimonan");

                    b.ToTable("MONAN", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Size", b =>
                {
                    b.Property<string>("Idsize")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDSIZE")
                        .IsFixedLength();

                    b.Property<string>("Tensize")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TENSIZE");

                    b.HasKey("Idsize")
                        .HasName("PK__SIZE__8DA14C4EE47FAF46");

                    b.ToTable("SIZE", (string)null);
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Topping", b =>
                {
                    b.Property<string>("Idtopping")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDTOPPING")
                        .IsFixedLength();

                    b.Property<int>("Giatopping")
                        .HasColumnType("int")
                        .HasColumnName("GIATOPPING");

                    b.Property<string>("Idloaimonan")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .HasColumnName("IDLOAIMONAN")
                        .IsFixedLength();

                    b.Property<string>("MonanIdmonan")
                        .HasColumnType("char(5)");

                    b.Property<string>("Tentopping")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("TENTOPPING");

                    b.HasKey("Idtopping")
                        .HasName("PK__TOPPING__B17F5B453E08CBB9");

                    b.HasIndex("Idloaimonan");

                    b.HasIndex("MonanIdmonan");

                    b.ToTable("TOPPING", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteOrdering.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebsiteOrdering.Models.ApplicationUser", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Chinhanh", "IdchinhanhNavigation")
                        .WithMany("Nguoidungs")
                        .HasForeignKey("Idchinhanh");

                    b.Navigation("IdchinhanhNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Ban", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Chinhanh", "IdchinhanhNavigation")
                        .WithMany("Bans")
                        .HasForeignKey("Idchinhanh")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__BAN__IDCHINHANH__267ABA7A");

                    b.Navigation("IdchinhanhNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Banlock", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Ban", "Ban")
                        .WithMany("Banlock")
                        .HasForeignKey("IdBan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__BANLOCK__IDBAN__267ABA7A");

                    b.Navigation("Ban");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chitietdatban", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Ban", "IdbanNavigation")
                        .WithMany("Chitietdatbans")
                        .HasForeignKey("Idban")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__CHITIETDA__IDBAN__403A8C7D");

                    b.HasOne("WebsiteOrdering.Models.Datban", "IddatbanNavigation")
                        .WithMany("Chitietdatbans")
                        .HasForeignKey("Iddatban")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__CHITIETDA__IDDAT__3F466844");

                    b.Navigation("IdbanNavigation");

                    b.Navigation("IddatbanNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chitietdonhang", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Debanh", "IddebanhNavigation")
                        .WithMany("Chitietdonhangs")
                        .HasForeignKey("Iddebanh")
                        .HasConstraintName("FK__CHITIETDO__IDDEB__49C3F6B7");

                    b.HasOne("WebsiteOrdering.Models.Donhang", "IddonhangNavigation")
                        .WithMany("Chitietdonhangs")
                        .HasForeignKey("Iddonhang")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__CHITIETDO__IDDON__47DBAE45");

                    b.HasOne("WebsiteOrdering.Models.Monan", "IdmonanNavigation")
                        .WithMany("Chitietdonhangs")
                        .HasForeignKey("Idmonan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__CHITIETDO__IDMON__48CFD27E");

                    b.HasOne("WebsiteOrdering.Models.Monan", "Idmonan2Navigation")
                        .WithMany()
                        .HasForeignKey("Idmonan2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_CHITIETDONHANG_IDMONAN2");

                    b.HasOne("WebsiteOrdering.Models.Size", "IdsizeNavigation")
                        .WithMany("Chitietdonhangs")
                        .HasForeignKey("Idsize")
                        .HasConstraintName("FK__CHITIETDO__IDSIZ__4AB81AF0");

                    b.Navigation("IddebanhNavigation");

                    b.Navigation("IddonhangNavigation");

                    b.Navigation("Idmonan2Navigation");

                    b.Navigation("IdmonanNavigation");

                    b.Navigation("IdsizeNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chitiettopping", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Chitietdonhang", "Chitietdonhang")
                        .WithMany("Chitiettoppings")
                        .HasForeignKey("IdChitiet")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__CHITIETTOPPING__4E88ABD4");

                    b.HasOne("WebsiteOrdering.Models.Topping", "IdtoppingNavigation")
                        .WithMany("Chitiettoppings")
                        .HasForeignKey("Idtopping")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__CHITIETTO__IDTOP__4D94879B");

                    b.Navigation("Chitietdonhang");

                    b.Navigation("IdtoppingNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Datban", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Chinhanh", "IdchinhanhNavigation")
                        .WithMany("Datbans")
                        .HasForeignKey("Idchinhanh")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__DATBAN__IDCHINHA__3C69FB99");

                    b.HasOne("WebsiteOrdering.Models.ApplicationUser", "Nguoidung")
                        .WithMany("Datbans")
                        .HasForeignKey("Idngdung")
                        .HasConstraintName("FK__DATBAN__IDNGDUNG__3B75D760");

                    b.Navigation("IdchinhanhNavigation");

                    b.Navigation("Nguoidung");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Donhang", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Chinhanh", "IdchinhanhNavigation")
                        .WithMany("Donhangs")
                        .HasForeignKey("Idchinhanh")
                        .HasConstraintName("FK__DONHANG__IDCHINH__4316F928");

                    b.HasOne("WebsiteOrdering.Models.Datban", "IddatbanNavigation")
                        .WithMany("Donhangs")
                        .HasForeignKey("Iddatban")
                        .HasConstraintName("FK__DONHANG__IDDATBA__440B1D61");

                    b.HasOne("WebsiteOrdering.Models.ApplicationUser", "IdngdungNavigation")
                        .WithMany("Donhangs")
                        .HasForeignKey("Idngdung")
                        .HasConstraintName("FK__DONHANG__IDNGDUN__44FF419A");

                    b.Navigation("IdchinhanhNavigation");

                    b.Navigation("IddatbanNavigation");

                    b.Navigation("IdngdungNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Listgiasize", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Loaimonan", "IdloaimonanNavigation")
                        .WithMany("Listgiasizes")
                        .HasForeignKey("Idloaimonan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__LISTGIASI__IDLOA__31EC6D26");

                    b.HasOne("WebsiteOrdering.Models.Size", "IdsizeNavigation")
                        .WithMany("Listgiasizes")
                        .HasForeignKey("Idsize")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__LISTGIASI__IDSIZ__32E0915F");

                    b.HasOne("WebsiteOrdering.Models.Monan", null)
                        .WithMany("ListGiaSizes")
                        .HasForeignKey("MonanIdmonan");

                    b.Navigation("IdloaimonanNavigation");

                    b.Navigation("IdsizeNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.MonAnGhepStats", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Monan", "MonAn")
                        .WithMany()
                        .HasForeignKey("Idmonan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MONANGHEPSTATS_MONAN");

                    b.Navigation("MonAn");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Monan", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Loaimonan", "IdloaimonanNavigation")
                        .WithMany("Monans")
                        .HasForeignKey("Idloaimonan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__MONAN__IDLOAIMON__38996AB5");

                    b.Navigation("IdloaimonanNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Topping", b =>
                {
                    b.HasOne("WebsiteOrdering.Models.Loaimonan", "IdloaimonanNavigation")
                        .WithMany("Toppings")
                        .HasForeignKey("Idloaimonan")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__TOPPING__IDLOAIM__2B3F6F97");

                    b.HasOne("WebsiteOrdering.Models.Monan", null)
                        .WithMany("Toppings")
                        .HasForeignKey("MonanIdmonan");

                    b.Navigation("IdloaimonanNavigation");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.ApplicationUser", b =>
                {
                    b.Navigation("Datbans");

                    b.Navigation("Donhangs");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Ban", b =>
                {
                    b.Navigation("Banlock");

                    b.Navigation("Chitietdatbans");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chinhanh", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Datbans");

                    b.Navigation("Donhangs");

                    b.Navigation("Nguoidungs");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Chitietdonhang", b =>
                {
                    b.Navigation("Chitiettoppings");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Datban", b =>
                {
                    b.Navigation("Chitietdatbans");

                    b.Navigation("Donhangs");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Debanh", b =>
                {
                    b.Navigation("Chitietdonhangs");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Donhang", b =>
                {
                    b.Navigation("Chitietdonhangs");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Loaimonan", b =>
                {
                    b.Navigation("Listgiasizes");

                    b.Navigation("Monans");

                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Monan", b =>
                {
                    b.Navigation("Chitietdonhangs");

                    b.Navigation("ListGiaSizes");

                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Size", b =>
                {
                    b.Navigation("Chitietdonhangs");

                    b.Navigation("Listgiasizes");
                });

            modelBuilder.Entity("WebsiteOrdering.Models.Topping", b =>
                {
                    b.Navigation("Chitiettoppings");
                });
#pragma warning restore 612, 618
        }
    }
}
