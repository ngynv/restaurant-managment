@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model List<WebsiteOrdering.Models.Datban>
@{
    ViewData["Title"] = "Trang quản lý";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    
}
<div class="content-title">
    <h2>Chào mừng đến với trang Admin</h2>
</div>
<p>Tìm kiếm đơn đặt bàn của khách hàng </p>
<form method="get" asp-action="Index" asp-area="Admin" class="row g-2 align-items-center" id="searchForm">
    <div class="col-auto">
        <input type="text" name="maDon" class="form-control" placeholder="Mã đơn" value="@Context.Request.Query["maDon"]" />
    </div>
    <div class="col-auto">
        <input type="text" name="sđt" class="form-control" placeholder="Số điện thoại" value="@Context.Request.Query["sđt"]" />
    </div>
    <div class="col-auto">
        <input type="text" name="tenNguoiDat" class="form-control" placeholder="Tên người đặt" value="@Context.Request.Query["tenNguoiDat"]" />
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-primary">
            <i class="bi bi-search"></i> Tìm
        </button>
    </div>
</form>

@if (Model != null && Model.Count > 0)
{
    <h4 class="mt-4">Kết quả tìm kiếm:</h4>
    <table class="table table-bordered table-hover mt-2">
        <thead>
            <tr>
                <th>Mã đơn</th>
                <th>Khách hàng</th>
                <th>Số điện thoại</th>
                <th>Ngày đặt</th>
                <th>Giờ bắt đầu</th>
                <th>Giờ kết thúc</th>
                <th>Chi nhánh</th>
                <th>Khu vực</th>
                <th>Bàn</th>
                <th>Trạng thái</th>
                <th>Chi tiết</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in Model)
            {
                var ct = d.Chitietdatbans.FirstOrDefault();
                <tr>
                    <td>@d.Iddatban</td>
                    <td>@d.Tenngdat</td>
                    <td>@d.Sđtngdat</td>
                    <td>@d.Ngaydat.ToString("dd/MM/yyyy")</td>
                    <td>@d.Giobatdau</td>
                    <td>@d.Gioketthuc</td>
                    <td>@d.IdchinhanhNavigation?.Tencnhanh</td>
                    <td>@ct.IdbanNavigation.Khuvuc</td>
                    <td>@ct.IdbanNavigation.Tenban</td>
                    <td>@d.Trangthaidatban.ToFriendly()</td>
                    <td>
                        @* <a asp-area="Admin" asp-action="DetailDonDatBan" asp-controler="BookingAdmin" asp-route-id="@d.Iddatban" class="btn btn-info btn-sm">Chi tiết</a> *@
                        <a asp-area="Admin"
                           asp-controller="BookingAdmin"
                           asp-action="DetailDonDatBan"
                           asp-route-id="@d.Iddatban"
                           class="btn btn-info btn-sm">
                            Xem chi tiết
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (Model != null && Model.Count == 0 && (Context.Request.Query.Count > 0))
{
    <p class="mt-3">Không tìm thấy đơn nào.</p>
}
<div id="soDoBanSection" class="border rounded p-3 mt-4">
    <h5>Chọn thời gian và khu vực để xem sơ đồ bàn</h5>

    <div class="row g-3 align-items-end">
        <div class="col-auto">
            <label for="ngayDatInput">Ngày:</label>
            <input type="date" id="ngayDatInput" class="form-control" value="@DateTime.Today.ToString("yyyy-MM-dd")" />
        </div>

        <div class="col-auto">
            <label for="Giobatdau">Giờ:</label>
            <select id="Giobatdau" name="Giobatdau" class="form-select">
                <option value="">-- Chọn giờ --</option>
            </select>
        </div>
        <div class="col-auto">
            <label for="selectChinhanh">Chi nhánh:</label>
            <select id="selectChinhanh" class="form-select">
                <option value="">-- Chọn chi nhánh --</option>
                @foreach (var cn in ViewBag.DanhSachChiNhanh as List<Chinhanh>)
                {
                    <option value="@cn.Idchinhanh">@cn.Tencnhanh</option>
                }
            </select>
        </div>

        <div class="col-auto">
            <label for="selectKhuvuc">Khu vực:</label>
            <select id="selectKhuvuc" class="form-select">
                <option value="">-- Chọn khu vực --</option>
            </select>
        </div>

        <input type="hidden" id="idChiNhanh" value="@User.FindFirst("ChiNhanhId")?.Value" />
    </div>

    <h5 class="mt-4">Sơ đồ bàn</h5>
    <canvas id="banCanvas" width="700" height="250" style="border:1px solid #ccc;"></canvas>
</div>

<!-- Modal thêm khung giờ lock -->
<div class="modal fade" id="banLockModal" tabindex="-1" aria-labelledby="banLockLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form id="banLockForm" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Quản lý khung giờ lock cho bàn <span id="modalTenBan"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="modalIdBan" />

                <div class="mb-3">
                    <label for="modalNgay">Ngày</label>
                    <input type="date" id="modalNgay" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>

                <div class="mb-3">
                    <label for="modalBatDau">Giờ bắt đầu</label>
                    <select id="modalBatDau" class="form-select" required></select>
                </div>

                <div class="mb-3">
                    <label for="modalKetThuc">Giờ kết thúc</label>
                    <select id="modalKetThuc" class="form-select" required></select>
                </div>


                <div id="lockList" class="mt-3">
                    <strong>Khung giờ đã lock hôm nay:</strong>
                    <ul class="list-group" id="lockListUl"></ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-success">Thêm khung giờ lock</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </form>
    </div>
</div>

<script>
    // Move deleteBanLock to global scope
    function deleteBanLock(idBanLock, idBan, ngay) {
        if (!confirm("Bạn chắc chắn muốn xóa khung giờ này?")) return;

        fetch(`/Admin/Admin/DeleteBanLock?idBanLock=${idBanLock}`, {
            method: "DELETE"
        })
            .then(res => res.json())
            .then(result => {
                alert(result.message);
                if (result.success) {
                    openBanLockModal({ idban: idBan, tenban: document.getElementById("modalTenBan").innerText });
                    loadCanvasBan();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi xóa khung giờ lock');
            });
    }

    document.getElementById("selectChinhanh").addEventListener("change", function () {
        var idChinhanh = this.value;
        fetch(`/Admin/Admin/GetKhuvucByChinhanh?idChinhanh=${idChinhanh}`)
            .then(res => res.json())
            .then(khuvucs => {
                var selectKhuvuc = document.getElementById("selectKhuvuc");
                selectKhuvuc.innerHTML = '<option value="">-- Chọn khu vực --</option>';
                khuvucs.forEach(kv => {
                    selectKhuvuc.innerHTML += `<option value="${kv}">${kv}</option>`;
                });
            });
    });

    document.addEventListener("DOMContentLoaded", function () {
        const canvas = document.getElementById("banCanvas");
        const ctx = canvas.getContext("2d");

        const chairImg = new Image();
        chairImg.src = "/css/img/ghe1.png";

        const backgroundImg = new Image();
        const backgroundImages = {
            "Ngoài trời": "/css/img/anhinh.jpg",
            "Trong nhà": "/css/img/trongnha.jpg",
            "Sân thượng": "/css/img/anhsanthuong.jpg"
        };

        const khuvucSelect = document.getElementById("selectKhuvuc");
        const ngayDatInput = document.getElementById("ngayDatInput");
        const gioSelect = document.getElementById("Giobatdau");
        const idChiNhanhInput = document.getElementById("idChiNhanh");

        // Load khu vực
        fetch('/Admin/Admin/GetKhuvucByChinhanh')
            .then(res => res.json())
            .then(data => {
                data.forEach(kv => {
                    const option = new Option(kv, kv);
                    khuvucSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading khuvuc:', error);
            });

        // Generate giờ đặt
        function generateTimeOptions(currentTotalMins = null) {
            const start = 9 * 60; // 9:00
            const end = 21 * 60; // 21:00
            const step = 30; // mỗi 30 phút

            gioSelect.innerHTML = "";
            gioSelect.appendChild(new Option("-- Chọn giờ --", ""));

            let hasValidTime = false;

            for (let mins = start; mins <= end; mins += step) {
                // Nếu đã có currentTotalMins (ví dụ hôm nay), thì bỏ qua giờ đã qua
                if (currentTotalMins !== null && mins <= currentTotalMins) continue;

                const hour = Math.floor(mins / 60);
                const minute = mins % 60;
                const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                gioSelect.appendChild(new Option(timeStr, timeStr));
                hasValidTime = true;
            }

            if (!hasValidTime) {
                gioSelect.appendChild(new Option("Không còn khung giờ nào hôm nay", "", true, true));
                gioSelect.disabled = true;
            } else {
                gioSelect.disabled = false;
            }
        }

        // Xử lý ngày mặc định hôm nay và khi người dùng thay đổi ngày
        const todayStr = new Date().toISOString().split('T')[0];
        ngayDatInput.setAttribute('min', todayStr); // không cho chọn ngày trong quá khứ

        function handleNgayDatChange() {
            const selectedDate = new Date(ngayDatInput.value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            // Nếu là hôm nay → lọc bỏ giờ đã qua
            if (selectedDate.toDateString() === today.toDateString()) {
                const now = new Date();
                const currentMins = now.getHours() * 60 + now.getMinutes();

                if (currentMins >= 21 * 60) {
                    gioSelect.innerHTML = "";
                    gioSelect.appendChild(new Option("Đã quá giờ nhận đặt bàn hôm nay", "", true, true));
                    gioSelect.disabled = true;
                } else {
                    generateTimeOptions(currentMins);
                }
            } else {
                generateTimeOptions(); // ngày khác → show full từ 9:00 đến 21:00
            }

            loadCanvasBan(); // gọi lại canvas để update sơ đồ bàn
        }

        // Gọi ngay lúc load trang
        handleNgayDatChange();

        // Gọi lại mỗi khi user chọn ngày mới
        ngayDatInput.addEventListener("change", handleNgayDatChange);
        gioSelect.addEventListener("change", loadCanvasBan);
        khuvucSelect.addEventListener("change", loadCanvasBan);
        let banLockIds = [];
        function loadCanvasBan() {
            const khuvuc = khuvucSelect.value;
            const ngay = ngayDatInput.value;
            const gio = gioSelect.value;
            // const idChinhanh = idChiNhanhInput.value;
            const idChinhanh = document.getElementById("selectChinhanh").value;
            console.log("gio", gio);
            if (!khuvuc || !ngay || !gio || !idChinhanh) return;

            fetch(`/Admin/Admin/GetBanByKhuvuc?idChinhanh=${encodeURIComponent(idChinhanh)}&khuvuc=${encodeURIComponent(khuvuc)}`)
                .then(res => res.json())
                .then(banList => {
                    // Gọi song song 2 API
                    Promise.all([
                        fetch(`/Admin/Admin/GetBanDaDat?ngay=${encodeURIComponent(ngay)}&gio=${encodeURIComponent(gio)}&idChinhanh=${encodeURIComponent(idChinhanh)}&idKhuvuc=${encodeURIComponent(khuvuc)}`).then(r => r.json()),
                        fetch(`/Admin/Admin/GetBanLockTrongKhoang?idChinhanh=${idChinhanh}&idKhuvuc=${khuvuc}&ngay=${ngay}&gio=${gio}`).then(r => r.json())
                    ]).then(([dsDatBan, dsBanLock]) => {
                        banLockIds = dsBanLock;
                        const mapTrangThai = {};

                        dsDatBan.forEach(d => {
                            mapTrangThai[d.idban] = d.trangThai || "Trống";
                        });

                        dsBanLock.forEach(idban => {
                            if (!mapTrangThai[idban]) {
                                mapTrangThai[idban] = "Đã lock";
                            }
                        });

                        banList.forEach(b => {
                            b.trangThai = mapTrangThai[b.idban] || "Trống";
                        });

                        const bgSrc = backgroundImages[khuvuc];
                        if (bgSrc) {
                            backgroundImg.src = bgSrc;
                            backgroundImg.onload = () => drawCanvas(banList);
                            if (backgroundImg.complete) drawCanvas(banList);
                        } else {
                            drawCanvas(banList);
                        }
                    });
                })
                .catch(error => {
                    console.error('Error loading ban list:', error);
                });
        }

        function drawCanvas(banList) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            if (backgroundImg.complete) {
                ctx.drawImage(backgroundImg, 0, 0, canvas.width, canvas.height);
            }

            banList.forEach(ban => {
                const x = parseFloat(ban.x);
                const y = parseFloat(ban.y);
                const r = 30;
                const tenban = ban.tenban;
                const songuoi = parseInt(ban.songuoi) || 1;

                let color = "#ffffff";
                if (banLockIds.includes(ban.idban)) {
                    color = "#dc3545"; // 🔴 màu đỏ nếu bàn bị lock
                } else {
                    switch (ban.trangThai) {
                        case "Chờ xác nhận": color = "#a9a9a9"; break;
                        case "Đã xác nhận": color = "#ffa500"; break;
                        case "Khách đã đến": color = "#ff69b4"; break;
                        case "Đang phục vụ": color = "#87ceeb"; break;
                        default: color = "#ffffff";
                    }
                }

                ctx.beginPath();
                ctx.arc(x, y, r, 0, 2 * Math.PI);
                ctx.fillStyle = color;
                ctx.fill();
                ctx.strokeStyle = "#333";
                ctx.stroke();
                ctx.closePath();

                ctx.fillStyle = "#000";
                ctx.font = "12px Arial";
                ctx.textAlign = "center";
                ctx.fillText(tenban, x, y);

                const radius = 50;
                for (let i = 0; i < songuoi; i++) {
                    const angle = (2 * Math.PI / songuoi) * i;
                    const gx = x + radius * Math.cos(angle);
                    const gy = y + radius * Math.sin(angle);
                    const deg = angle + Math.PI / 2;
                    drawRotatedImage(ctx, chairImg, gx, gy, deg, 40, 40);
                }
            });

            // Move click event outside the forEach loop
            canvas.onclick = function (e) {
                const rect = canvas.getBoundingClientRect();
                const clickX = e.clientX - rect.left;
                const clickY = e.clientY - rect.top;

                for (const ban of banList) {
                    const x = parseFloat(ban.x);
                    const y = parseFloat(ban.y);
                    const r = 30;

                    const dx = clickX - x;
                    const dy = clickY - y;

                    if (dx * dx + dy * dy <= r * r) {
                        openBanLockModal(ban);
                        break;
                    }
                }
            };
        }

        function drawRotatedImage(ctx, image, x, y, angle, width, height) {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(angle);
            ctx.drawImage(image, -width / 2, -height / 2, width, height);
            ctx.restore();
        }
        function generateTimeDropdownOptions(selectElement) {
            const start = 9 * 60;
            const end = 21 * 60;
            const step = 30;

            selectElement.innerHTML = "";
            selectElement.appendChild(new Option("-- Chọn giờ --", ""));

            for (let mins = start; mins <= end; mins += step) {
                const hour = Math.floor(mins / 60);
                const minute = mins % 60;
                const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
                selectElement.appendChild(new Option(timeStr, timeStr));
            }
        }

        // Make openBanLockModal available globally
        window.openBanLockModal = function (ban) {
            const idBan = ban.idban;
            const tenBan = ban.tenban;
            const ngay = document.getElementById("ngayDatInput").value;

            document.getElementById("modalIdBan").value = idBan;
            document.getElementById("modalTenBan").innerText = tenBan;
            document.getElementById("modalNgay").value = ngay;
            const batDauSelect = document.getElementById("modalBatDau");
            const ketThucSelect = document.getElementById("modalKetThuc");
            generateTimeDropdownOptions(batDauSelect);
            generateTimeDropdownOptions(ketThucSelect);

            document.getElementById("modalBatDau").value = "";
            document.getElementById("modalKetThuc").value = "";

            document.getElementById("modalNgay").addEventListener("change", () => {
                const newNgay = document.getElementById("modalNgay").value;
                loadBanLockList(idBan, newNgay);  // cập nhật danh sách theo ngày mới
            });

            // Clear danh sách khung giờ cũ
            const lockListUl = document.getElementById("lockListUl");
            lockListUl.innerHTML = "";

            // Lấy danh sách đã lock
            function loadBanLockList(idBan, ngay) {
                const lockListUl = document.getElementById("lockListUl");
                lockListUl.innerHTML = "";

                // ✅ Gọi đúng API chỉ cần idBan và ngay
                fetch(`/Admin/Admin/GetBanLockAllByBan?idBan=${idBan}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data.length === 0) {
                            lockListUl.innerHTML = "<li class='list-group-item'>Chưa có khung giờ nào</li>";
                        }
                        else {
                            const grouped = {};
                            data.forEach(lock => {
                                if (!grouped[lock.ngay]) grouped[lock.ngay] = [];
                                grouped[lock.ngay].push(lock);
                            });

                            Object.keys(grouped).forEach(ngay => {
                                const header = document.createElement("li");
                                header.className = "list-group-item active";
                                header.innerText = `Ngày ${ngay}`;
                                lockListUl.appendChild(header);

                                grouped[ngay].forEach(lock => {
                                    const li = document.createElement("li");
                                    li.className = "list-group-item d-flex justify-content-between align-items-center";
                                    li.innerHTML = `
                                        ${lock.batDau} - ${lock.ketThuc}
                                        <button class="btn btn-sm btn-danger" onclick="deleteBanLock('${lock.idBanLock}', '${idBan}', '${lock.ngay}')">X</button>`;
                                    lockListUl.appendChild(li);
                                });
                            });

                        }
                    })
                    .catch(error => {
                        console.error('Error loading ban lock:', error);
                        lockListUl.innerHTML = "<li class='list-group-item text-danger'>Lỗi tải dữ liệu</li>";
                    });
            }



            const modal = new bootstrap.Modal(document.getElementById("banLockModal"));
            loadBanLockList(idBan);

            modal.show();
        }

        // Make loadCanvasBan available globally
        window.loadCanvasBan = loadCanvasBan;

        document.getElementById("banLockForm").addEventListener("submit", function (e) {
            e.preventDefault();

            const idBan = document.getElementById("modalIdBan").value;
            const batDau = document.getElementById("modalBatDau").value;
            const ketThuc = document.getElementById("modalKetThuc").value;
            const ngay = document.getElementById("modalNgay").value;
            // ✅ In ra console để kiểm tra dữ liệu
            console.log("DỮ LIỆU GỬI:");
            console.log("idBan:", idBan);
            console.log("batDau:", batDau);
            console.log("ketThuc:", ketThuc);
            console.log("ngay:", ngay);
            // Validate input
            if (!idBan || !batDau || !ketThuc || !ngay) {
                alert("Vui lòng điền đầy đủ thông tin");
                return;
            }

            fetch(`/Admin/Admin/AddBanLock?idBan=${idBan}&batDau=${batDau}&ketThuc=${ketThuc}&ngay=${ngay}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]')?.value || ""
                },
                body: JSON.stringify({ idBan, batDau, ketThuc, ngay })
            })
                .then(res => res.json())
                .then(result => {
                    alert(result.message);
                    if (result.success) {
                        openBanLockModal({ idban: idBan, tenban: document.getElementById("modalTenBan").innerText });
                        loadCanvasBan(); // Vẽ lại bàn sau khi thêm lock
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi thêm khung giờ lock');
                });
        });

        // Vẽ sơ đồ ngay khi load nếu đã có đủ dữ liệu
        setTimeout(loadCanvasBan, 500);
    });
</script>